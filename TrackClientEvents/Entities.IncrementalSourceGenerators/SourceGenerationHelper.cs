using System;
using System.Collections.Generic;
using System.Text;

namespace Entities.IncrementalSourceGenerators;

public static class SourceGenerationHelper
{
    public const string Attribute = @"// <auto-generated>
namespace Entities;

[System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
public class AuditAttribute : System.Attribute
{
}";

    private const string AuditableProperties = @"
            public Guid? AuditUserId { get; set; }
            public int? AuditClientId { get; set; }
            public DateTime AuditDate { get; set; }
            public required string AuditActionType { get; set; }";

    public const string AuditClass = @$"// <auto-generated>
#nullable enable

namespace Entities;

public abstract class Auditable
{{
   {AuditableProperties}
}}";

    public static string GetAuditableClassCode(in AuditToGenerate auditToGenerate)
    {
        var codeBuilder = new StringBuilder();

        var entityClassNamespace = auditToGenerate.Namespace;

        var generatedClassName = $"{auditToGenerate.Name}Auditable";

        codeBuilder.AppendLine("// <auto-generated>");
        codeBuilder.AppendLine("#nullable enable");
        codeBuilder.AppendLine($"// {DateTime.Now}");
        codeBuilder.AppendLine("using System;");
        codeBuilder.AppendLine("using System.Collections.Generic;");
        codeBuilder.AppendLine("using System.Linq;");
        codeBuilder.AppendLine("using Microsoft.EntityFrameworkCore;");
        codeBuilder.AppendLine("using Microsoft.EntityFrameworkCore.Metadata.Builders;");
        codeBuilder.AppendLine("using TrackClientEventsAuditNetWithIncrementalSourceGenerators;");

        codeBuilder.AppendLine("");
        codeBuilder.AppendLine($"namespace {entityClassNamespace};");
        codeBuilder.AppendLine("");

        codeBuilder.AppendLine($"public class {generatedClassName}: Entities.Auditable");
        codeBuilder.AppendLine("{");

        codeBuilder.AppendLine("\tpublic int Identifier { get; set; }");
        foreach (var property in auditToGenerate.PropertyTypes)
        {
	        codeBuilder.Append("\tpublic ").Append(property.Value.Type).Append(' ').Append(property.Value.Name).AppendLine("{ get; set; }");
        }

        codeBuilder.AppendLine("}");

        codeBuilder.AppendLine(
            @$"public partial class {generatedClassName}Configuration : IEntityTypeConfiguration<{generatedClassName}>
{{
    public void Configure(EntityTypeBuilder<{generatedClassName}> builder)
    {{
            builder.HasKey(x => x.Identifier);");

        codeBuilder.AppendLine(@"
    }
}");
        return codeBuilder.ToString();
    }

    public static string GenerateDbContext(List<string> types)
    {
        var dbContextCode = new StringBuilder();
        dbContextCode.AppendLine("// <auto-generated>");
        dbContextCode.AppendLine("#nullable enable");
        dbContextCode.AppendLine($"// {DateTime.Now}");
        dbContextCode.AppendLine("using Microsoft.EntityFrameworkCore;");
        dbContextCode.AppendLine("using Entities;");
        dbContextCode.AppendLine("");
        dbContextCode.AppendLine("namespace TrackClientEventsAuditNetWithIncrementalSourceGenerators;");
        dbContextCode.AppendLine("");
        dbContextCode.AppendLine("public partial class ClientDbContext");
        dbContextCode.AppendLine("{");
        foreach (var type in types) dbContextCode.AppendLine($"\tpublic DbSet<{type}> {type}s => Set<{type}>();");

        dbContextCode.AppendLine("protected void OnAuditModelCreating(ModelBuilder modelBuilder)");
        dbContextCode.AppendLine("{");
        foreach (var type in types)
            dbContextCode.AppendLine($"\tmodelBuilder.ApplyConfiguration(new {type}Configuration());");

        dbContextCode.AppendLine("}");

        dbContextCode.AppendLine("}");
        return dbContextCode.ToString();
    }

    public static string GenerateAuditMappingExtensions(
        List<(string originalClassName, string generatedClassName)> types)
    {
        var dbContextCode = new StringBuilder();
        dbContextCode.AppendLine("// <auto-generated>");
        dbContextCode.AppendLine("using Audit.EntityFramework.ConfigurationApi;");
        dbContextCode.AppendLine("using TrackClientEventsAuditNetWithIncrementalSourceGenerators;");
        dbContextCode.AppendLine("");
        dbContextCode.AppendLine("namespace Entities;");
        dbContextCode.AppendLine("");
        dbContextCode.AppendLine("public static class AuditMappingExtensions");
        dbContextCode.AppendLine("{");

        dbContextCode.AppendLine("public static IAuditEntityMapping MapAuditables(this IAuditEntityMapping map)");
        dbContextCode.AppendLine("{");
        foreach (var (originalClassName, generatedClassName) in types)
            dbContextCode.AppendLine($"\tmap.Map<{originalClassName}, {generatedClassName}>();");

        dbContextCode.AppendLine("\treturn map;");
        dbContextCode.AppendLine("}");

        dbContextCode.AppendLine("}");
        return dbContextCode.ToString();
    }
}